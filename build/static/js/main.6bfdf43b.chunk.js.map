{"version":3,"sources":["components/Navbar.js","components/About.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","onClick","toggleMode","htmlFor","About","mystyle","color","backgroundColor","style","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newtext","toUpperCase","showalert","toLowerCase","split","filter","element","prototype","PropTypes","string","about","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","Mode","setMode","setalert","message","setTimeout","document","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6bfdf43b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n \r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li>\r\n\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\"  onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='dark'?\"Enable Light Mode\":\"Enable Dark Mode\"}</label>\r\n</div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\nNavbar.prototype={title:PropTypes.string,about:PropTypes.string}  \r\nNavbar.defaultProps={title:'Enter the title',about:'About'};\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n  // let  mystyle={\r\n  //       color:'white',\r\n  //       backgroundColor:'black'\r\n  //   }\r\nlet mystyle={\r\n  color:props.mode==='dark'?'white':'black',\r\n  backgroundColor:props.mode==='dark'?'black':'white',\r\n\r\n}\r\n  \r\n\r\n// const[btni,btnf]=useState(\"Enable dark Mode\")\r\n// const toggle=()=>{\r\n//   if(mystyle.color==='black')\r\n//   {\r\n//     setmystyle(\r\n//       {\r\n//         color:'white',\r\n//   backgroundColor:'black'\r\n//       }\r\n//     )\r\n//     btnf(\"Enable Light Mode\")\r\n//   }\r\n//   else{\r\n//     setmystyle(\r\n//       {\r\n//         color:'black',\r\n//   backgroundColor:'white'\r\n//       }\r\n//     )\r\n//     btnf(\"Enable Dark Mode\")\r\n//   }\r\n// }\r\n\r\n\r\n    return (\r\n        <>\r\n       \r\n        <div className=\"container\" style={mystyle}>\r\n            <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\"  style={mystyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\r\n      <button className=\"accordion-button\" style={mystyle}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\r\n       Analyze your text\r\n      </button>\r\n    </h2>\r\n    <div id=\"panelsStayOpen-collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={mystyle} >\r\n    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\r\n       Free Utilities\r\n      </button>\r\n    </h2>\r\n    <div id=\"panelsStayOpen-collapseTwo\" style={mystyle} className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={mystyle}>\r\n    <h2 className=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\r\n        Browser Compatibilities\r\n      </button>\r\n    </h2>\r\n    <div id=\"panelsStayOpen-collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n            \r\n        </div>\r\n        {/* <div className=\"conatiner my-2\"  >\r\n            <button className=\"btn btn-info mx-3 \" onClick={toggle} style={mystyle}> {btni}</button>\r\n        </div> */}\r\n       </>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const handleupclick = () => {\r\n        //    console.log(\"Uppercase was clicked\"+text);\r\n        let newtext = text.toUpperCase();\r\n        \r\n        setText(newtext);\r\n        props.showalert(\"Converted to upperCase\",\"success\");\r\n     \r\n    };\r\n    const handleLoclick = () => {\r\n        //    console.log(\"Uppercase was clicked\"+text);\r\n        let newtext = text.toLowerCase();\r\n\r\n        setText(newtext);\r\n        props.showalert(\"Converted to LowerCase\",\"success\");\r\n\r\n    };\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n    const handleclear = () => {\r\n        setText(\"\");\r\n        props.showalert(\"Text area is cleared\",\"success\");\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" style={{backgroundColor: props.mode==='dark'?'rgb(35 60 114)':'white',color: props.mode==='dark'?'white':'black'}}  value={text} onChange={handleOnChange} rows=\"5\"></textarea>\r\n                </div>\r\n                <div className=\"container my-3\"         >\r\n                    <button  disabled={text.length===0} className=\"btn btn-info mx-3  my-1\" onClick={handleupclick} style={{backgroundColor:'#187890'}} >\r\n\r\n                        ToUpperCase\r\n                    </button>\r\n                    <button disabled={text.length===0} className=\"btn btn-info mx-3 my-1\" onClick={handleLoclick} style={{backgroundColor:'#187890'}}>\r\n\r\n                        ToLowerCase\r\n                    </button>\r\n                    <button disabled={text.length===0} className=\"btn btn-info mx-3 my-1\" onClick={handleclear } style={{backgroundColor:'#187890'}}>\r\n\r\n                        Clear Screen\r\n                    </button>\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"container \" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>Your text summary</h1>\r\n                <p >{text.split(\".\").length } sentences</p>\r\n\r\n                <p >{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length } words</p>\r\n                <p>{text.length} character</p>\r\n                <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length * 0.008} minutes reading time</p>\r\n            </div>\r\n\r\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>Preview</h1>\r\n                <p>{text.length>1?text:'Write something to preview it here'}</p>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n  const capitalize = (word) => {\r\n    const lower = word.toUpperCase();\r\n    return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n  }\r\n  return (\r\n<div style={{height:'70px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong> {capitalize(props.alert.type)}</strong>  :{props.alert.msg}\r\n    </div>\r\n}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  \n} from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n  const [ alert, setalert ] = useState(null);\n  const showalert = (message, type) => {\n    setalert(\n      \n       { msg: message,\n        type: type},\n\n        setTimeout(() => {\n          setalert(null);\n        }, 1500)  \n      \n    )\n\n\n  }\n  const toggleMode = () => {\n    if (Mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#111d38';\n      showalert(\"Dark mode has been enable\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showalert(\"Light mode has been enable\", \"success\");\n    }\n  }\n  return (\n    <>\n\n<Router>\n      <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container mb-3\">\n      \n      <Routes>\n          <Route path=\"/about\" element={ <About  mode={Mode} />}>\n           \n          </Route>\n         \n          <Route path=\"/\" element={<TextForm heading=\"Enter the text to anlyze below\" mode={Mode} showalert={showalert} />}>\n          \n\n          </Route>\n        </Routes>\n       \n      </div>\n      </Router>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}